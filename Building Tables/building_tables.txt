Here is the start of my reading ob Building Table Views with Phoenix LiveView

Chapter 1 Building a Simple Table UI (1)
    Creating Schema and Context
        As of right now we only have the name and that is it to store data about the Meerkat

    Creating the LiveView
        We put just the socket with the mount and then handle the params with the handle_params() which calls the function assign_meerkats(socket) which simply calls the right Meerkats.list_meerkats()

    Wrapping Up
        RIght not it just loads everything that the table has to offer. We want to start to be able to sort the table and anything that is has in it.

Chapter 2 Sorting the Table (5)
    Sorting the Data in the Database
        You can add some SQL params to the intial query so that we can at least sort the data before the site or server gets the info.

        One thing to keep in mind is that you can try and be sure that the list_meerkats function can be untilized for any other type of query. So we can add some query params to the list_meerkats.

        Okay so let's talk about the new features, that is in the code below:
        def list_meerkats(opts \\ %{sort_by: :name, sort_dir: :asc}) do
            from(m in Meerkat)
            |> sort(opts)
            |> Repo.all()
        end

        defp sort(query, %{sort_by: sort_by, sort_dir: sort_dir})
            when sort_by in [:id, :name] and
                    sort_dir in [:asc, :desc] do
            order_by(query, {^sort_dir, ^sort_by})
        end

        defp sort(query, _opts), do: query

        from(m in Meerkats) # This allows us to add more piped function to the query.
        
        # This will make sure that we only take good params for the search
        defp sort(query, %{sort_by: sort_by, sort_dir: sort_dir}) 
            when sort_by in [:id, :name] and
            sort_dir in [:asc, :desc] do
        defp sort(query, _opts), do: query # Default pattern matching for bad opts
        
    Setting up LiveView 
        LiveComponet to handle user input
        LiveView to make the changes
        Live navigation to make sure that the page is within the correct url so that any person can simply copy the URL to get to the same page.

    Sorting with LiveComponet
        Lets go over this new code:
        defmodule MeowWeb.MeerkatLive.SortingComponent do
            use MeowWeb, :live_component

            # This will be sure that we only render the needed new information
            # as we will add this to the render page as a componet
            def render(assigns) do 
                ~H"""
                <div phx-click="sort" phx-target={@myself} >
                <%= @key %> <%= chevron(@sorting, @key) %>
                </div>
                """
            end

            # We have the phx-click as an event. we access the current sort_dir and the key
            # which is the id/name this button should only switch the direction and as such 
            # will only swap the direction
            def handle_event("sort", _params, socket) do
                %{sorting: %{sort_dir: sort_dir}, key: key} = socket.assigns
                sort_dir = if sort_dir == :asc, do: :desc, else: :asc
                opts = %{sort_by: key, sort_dir: sort_dir}
                send(self(), {:update, opts})
                {:noreply, assign(socket, :sorting, opts)}
            end

            # This is simply there to add in an arrow to the page to see the direction
            def chevron(%{sort_by: sort_by, sort_dir: sort_dir}, key)
                when sort_by == key do
                if sort_dir == :asc,
                do: "⇧",
                else: "⇩"
            end

            # Error matching for when we dont have a real querry opts
            def chevron(_opts, _key), do: ""
        end

    Adding the LiveComponet to the HEEx Template
        Once we added in the new headers we will get the new functionality however there are still a few things that we need to add to the original render.

    Updating the URL with the New Sorting Parameters
        Now we need to be sure that we are able to update the URL for the different searches

        # This makes sure that when we update the search we update the URL
        def handle_info({:update, opts}, socket) do
            path = Routes.live_path(socket, __MODULE__, opts)
            {:noreply, push_patch(socket, to: path, replace: true)}
        end

    Parsing and Assigning the Sorting Parameters
        With everything done so far we have had nothing to make sure that the data sent to the sorting componet are valid. 

    Putting the SortingForm to Use
        So we added a lot of functionality to this lets go over everythin. First let me talk about what just happened with the SortingForm. We created a helper function that allows to set some dynamic "valid" values for the sorting Schemaless Changeset. Along with this we previousluy made sure that anyclick on the header of the table will not only trigger an event but update the URL so that you could just copy and paste the URL to get to the same place as an other user (handle_info/2).

        handle_params/3 is now able to parse the params and (with a helper function) and then send that info to the list_meerkats/1 function. 

        The helper function makes sure that parse_params/2 will take the users socket and if we have a valid param for the SortingForm will then update the  :sorting value to the new vales, if there isn't a proper values or none given it will populate with the default_value. This is taken care of but the with/else statement and the fact that the assign_sorting/2 has a default value for the second param.
    
    Wrapping Up
        We did a lot and we now should try to go over eveything that was done and how it was done. 

        First we load the page it the mount and that simple will start the page and then render the html and css

        We have a blank page and we see an need to update the params, which calls the handle_params function. It currently takes the default values for the params (:id, :asc) and loads the meekats. 

        From the meerkat_live.html we added in the .live_component so that the header of each column will have a componet that will trigger the MeowWeb.MeerkatLive.SortingComponent with labels for the id or name. 

        Going to the SortingComponent we see that each element is rendering a simple div with a phx-click event where target is the componet calling them, the click will trigger an event="sort" which will check for the current state of the :id or :name sort and change the value and then send an update to self() to show that we need to change the param values. 

        There is also a chevon that will display whether we are asc or desc with an arrow.

        This takes us back to the meerkat_live.ex whenever a param changes we call the handle_params/3 and run through the same thing as we did at the begining but now we have values for the params that will need to be updated. Parse params will then not go with the default values and makes sure to run the first while condition and change the start of :sorting to the proper new values, this will then be sent to assign meerkats and update the page.

        I think this (only mounting something small) is what is happening with my GameSite, look into this.
    
Chapter 3 Filtering the Table (17)
    Filtering the Database
        So we jsut adde a lot of new functionality so we can now filter the meerkats that are shown. This was over the course of a few new function. filter_by_id/2 is pretty simple as we only have a single where so that we capture the single id with the given value.

        filter_by_name/2 is different as we need to be able to match not a full name but any name that contains the value we send. query_string = "%${name}%" means that we are searching for anything that has #{name} in it with leading or trailing letters. We then take that query_string and send it to the new where/3 so that we can search the database. ilike is used when we want to search case-insensitively (the [m] refers to the orginal m in the from(m in Meerkat))

        Each function has a fallback pattern match to be sure that when we don't pass a value or the page first loads we will have the whole database.

    A Note on Query Composition
        So in this case we took what could have been on single query and broke it into different ones. We first built the filter which will take all filters and goes through them indiviutally. Then we took care of the singular filters so that we can change them as needed. As they all have null cases and this allows us to add any more filters that we want on top of what we have. Keep this in mind while building your database and the filters that you will use.

        Keep in mind that if you start to embed a lot of queries you might find that different large and robust queries might be the best way as you could have 2 filter_by_name functions that are case sensitive and not... This case might be better to pull those queries into their own functions.

    Creating the Filter LiveComponet
        First we created the HEEx template with and Ecto.Changeset that triggers a search event.

        Phoenix.HTML.From (.form) will help us create inputs for the fields or id of name. The second and third lines for each div will set the validation for the inputs. 

        Every LiveComponet has a built-in update/2 that merges all the assigns into the socekt. But in this case we dont want to send out the new filters unless they have been vailidated. Which will happen within the FilterForm.change_values/1 which I will get into later, this will set the @changeset value that we are looking for.

        handle_event/3 is the next function to look at. So we are triggerin the event "search" with the submit button. This will check to see if the values are valid (with the soon to be made FilterForm.parse/1) those values will be sent within the "filter" param from the FilterForm. If we have good values then we will send it along to the send(self(), {:update, opts}), if not we send the Changeset back and let the HTML form render the errors.

        Lets create the FilterForm:
            So for this one its a lot of the same values as with the SortingForm but we have a few more things to validate here. We cast the params, and then have a small validation_number(:id, greater_than_or_equal_to: 0). This simply makes sure that the values is greater than or equal to 0.

            One other thing is that the default value will be nil as we dont want to filter off the bat as people will want to see all Meerkats on page load.

            Looking at the change_values we want to simply change the vlaues into a changeset not override anything as they have alreadu been verified. 
    
    Adding the Filter to the LiveView
        So we needed to add the componet into the heex file that was pretty simple. Let's go over the changes to the meerkat_live.ex:

            We added in the alias
            We updated the parse_params/2 to include a check for the filter and then made sure that we apllied the filter before the sort. We might want to add a Flash_message to let the person know that an invalid entry was submitted as now matter what we will display something that will work.

            Then we added in an assign_filter/2 that will set the default values if nothing is sent to the filter.

        We still need to worry about too much chnaging and not being reflected as we are not merging the needed params, and we are not removing empty params.

            One of the biggest things that we did was the merge_and_sanitize_params/2 which takes all the params and removes blanks and merges the rest of the needed filters/search params.

            Once that was done we simply needed to be sure to add that function to the different calls to be sure that no matter what or where the functions are called you are merging and sanitizing the params.

            Lets go over the merge_and_sanitize_params/2
                We take an empty map and merge in any values for the filter and the sorting,
                then we add in the overrides so that no matter what we are sending info that will work
                then we remove any nil values
                then we turn it into a new map to be sure that its clean.

    Wrapping Up
        So lets go over what we have done here:
            We first started off by adding in more functionality to the meerkats.ex this was a way to add more filtering and be sure that we only get the infomation that we want. Some things to keep in mind with the solution that we came up with is that we made sure that it was as orthogonal as possible by separating out each filter and calling them both with a single fitler function.

            We then created the filter_componet so that we can add in the search form to the meerkat_live.html.heex. This is a simple form thats takes 2 entry points and runs the search event. We made sure to validate some of the inputs right away, (string, integer) but some of the later validations happen once we send the info to the "search" event.

            Once that was done we created the filter_form.ex so that we have schemaless changeset, the only real difference here is that we have a validation_number check for the user_id

            We then added in the componet to the LiveView

            WE then changed the meerkat_live.ex to reflect the new changes. This was a small change to be sure that the filters would be applied and that we have some overrides set.

            Lastly we changed the code for the URL update and made sure that we merged the filter and sort and removed any nil values so that we will only put into the URL what we want to see.


Chapter 4 Paginating the Table (29)
    Paginating the Database (meerkats.ex)
        First we start with the meerkats.ex and add some more functionality. 
        
        In this case we added in the list_meerkats_with_total_count which will sort the meerkats and then paginate the meerkats. We also added in the total_count to the socket so we can keep track of the total number of meerkats so we can separate the pages. We could have just changed the original list_meerkats/1 but in this case we changed the return value to reflec that we need to know the total number of meerkats.

        Next we added in the helper function paginate/2 which will take the query and the current page and page_size so that we can get the right entry and then the right page number for that entry.

    Creating the Pagination LiveComponet (pagination_componet.ex)
        First let's talk about the ~H""" """" code
        first we had to create a button for each page that will be shown this is done with the pages/1 function that will be created below the render, this will return all the pages and then a bool for if its the current page. Each page button will have the label as the page number.
        Also keep in mind that we trigger the show_page event when any button is clicked.

        We also added in a dropdown element to change the number of entries we display per page, which will trigger the set_page_size event.

        Now we can go over the code for this componet:
        
        First let's look at the helper function that we created first.
            This takes the page_size current_page and the total_count

            we then get the page_count cased of the ceil(total_count / page_size) # rounded up

            then we need to run through all the pages by creating a for loop for them.

            THis will go though every step and create a tuple for the page_number and whether its the current page.

            Last is the 2 event functions that call parse_params as we want to update the info, which then is sent to the parse_params to be sure that the new info is correct. 

        Now let's go over the pagination_form.ex
            This is very similar to every other form save that we aren't having to use specific values for the fields and we have a few more validate_number/3 calls. We still have the same merge for the entries at the default_values/1 call and still set some @default_values.

    Adding Pagination to the LiveView
        First we add the componet to the html.heex # at the end

        Now we need to be sure that the meerkat_live.ex has code that reflects the new changes and be sure the addd in the new forms.

        We have the new functions that will assign the pagination and validate the new params but we sill don't have the pagination information withing the socket so we need to add those in.

        assign_merrkats/1:  
            we neede to be sure that we have the right meerkats and that we have the total # of meerkats and that we set the total_number of meerkats

        merge_and_sanitize_params/2:
            we added in the new pagination so that it also updates or removes the things that we don't want it to have as awell as removing the total_count from the URL because we don't need to display that information.

            We also needed to possibly reset the pagination if the change has filter options. If so it resets the page back to 1.

    Wrapping up.
        meerkats.ex:
            we needed to add in the pagination to the lookup, in this case we created a whole new fucntion to deal with that.

        pagination_componet.ex:
            here we had to creat the html for that and deal with any new events that would trigger

        pagination_form.ex:
            here we had to deal with all the new vaildations for the pagination form.

        meerkats_live.html.heex:
            here we had to add the new componet to the page

        meerkat_live.ex
            here is where we had to add in the new functions as well as be sure that we add the pagination to the socket so that it can be dealt with on the page.

Chapter 5 Paginatiing the Table Using Infinity Scrolling (43)
    Setting up the Content
        We wont want to use the list_meerkats_with_total_count as this wont help us in this context as we ill just keep loading more content.

        We need the meerkat_count/0 so we know when we have reached the end of the meerkats.
        list_meerkats_with_pagination/2 is very similar to the first element however we dont have any logic for the current page or the total pages.

    Creating the LiveView
        The HEEx template is very similar to the previous template however we added 2 new things phx-update and phx-hook

        Instructing LiveView How to Handle New Data
            phx-update="append" will tell it what to do when there is an update (phx-update) to the data in @meerkats and what to do with the data ("append"). 

            Lets look at a few more tags that could go with phx-update:
                ignore - ingnore any changes
                prepend - will add more rows to the TOP of the list, when we prepend we will need to give each item a unique id so we might add id={"meerkat-#{meekat.id}}"
                InfinityScroll - This will send a load more event to the liveview so that we can just load more elements.

        Optimizing Memory Consumption with Temporary Assigns
            temporary_assigns we can make LiveView get rid of any data that has already been assigned. In this way we can be sure we have the exact amout of render and loading that we need. If the limit it too high we will need to load too much and have issues with memory, if its too low we might have issues with bandwidth.

            handle_event("load_more", _params, socket):
                This will get the offset, limit, and count of the current users postion in the list.
                Once this is done we do a check to see if the offset is greater than the count and load more data if needs be (while also updating the offset: offset + limit)

            router.ex:
                We now need to add in the new route to the LiveView so that we can keep the old utility as a well as the new InfiityScroll
    
    Adding the LiveView Client Hook
        We added in the functions (elixir) and set the route now we need to define the hook with java, because most of the time we are doing server-to-client but in this case we need client-to-server.

        We need create a new file in assets/js/infinity-scroll.js and add this
        export default {
            rootElement() {
                return (
                   document.documentElement || document.body.parentNode || document.body
                );
            },
            scrollPosition() {
                const { scrollTop, clientHeight, scrollHeight } = this.rootElement();
                return ((scrollTop + clientHeight) / scrollHeight) * 100;
            }
        }

        This has 2 helper functions:
            rootElement is there to retrieve the body of the html

            scrollPosition is there to let the user know where the user is at in the page (scroll-wise)
            it uses 3 points of data:
                scrollTop : amount of scroll ABOVE the current position
                clientHeight : amount of scroll the current window is seeing
                scrollHeight : total height of the entire webpage

        now that we have that set we can add the mount:
            mounted() {
                this.threshold = 90;
                this.lastScrollPosition = 0;
                window.addEventListener("scroll", () => {
                    const currentScrollPosition = this.scrollPosition();
                    const isCloseToBottom =
                        currentScrollPosition > this.threshold &&
                        this.lastScrollPosition <= this.threshold;
                    if (isCloseToBottom) this.pushEvent("load-more", {});
                    this.lastScrollPosition = currentScrollPosition;
                });
            }

        let's go over this one too
            we have some variables:
                threshold # what percentage we need to be to load more
                lastScrollPosition # position of the last position of the scroll before new content was loaded
                currentScrollPosition # where we currently are at (updated with every scroll)
                isCloseToBottom # a bool that says if we are close to the bottom

        This is the framework that we can use to get what we need.

    Warpping Up
        So for this we need to add a few lines to the app.js that the book didn't cover.
        import InfinityScroll from "./infinity-scroll";
        Hooks.InfinityScroll = InfinityScroll;

        Now lets go over the changes and the files:
            meerkats.ex
                We added in the function to paginate the meerkats, we only need the offset and the limit

            infinity_live.ex
                This is the render and the function to handle the "load-more" merkats also the mount

            router.ex
                this was a simple way to add an other page to the user expierence

            infinity-scroll.js
                This is the java webhook that we use to deal with the listener for the user to scroll

            app.js
                need to import the js function and add the hook to the list.
        

            