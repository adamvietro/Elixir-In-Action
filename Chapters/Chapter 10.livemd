# Chapter 10

## Section

```elixir
# Random long job that takes time to finish
long_job =
  fn ->
    Process.sleep(2000)
    :some_result
  end
```

```elixir
task = Task.async(long_job)
Task.await(task)
```

```elixir
# Setting up a set of queries that will run
run_query =
  fn query_def ->
    Process.sleep(2000)
    "#{query_def} result"
  end
```

```elixir
# You can now create any number of these jobs to work on with an range
queries = 1..5

tasks =
  Enum.map(
    queries,
    &Task.async(fn -> run_query.("query #{&1}") end)
  )

Enum.map(tasks, &Task.await/1)
```

```elixir
# here is the same thing but with pipes
task = fn task -> "output #{task}" end
1..5
|> Enum.map(&Task.async(fn -> task.(&1) end))
|> Enum.map(&Task.await(&1))
```

```elixir
# Here is a non-awaits Task
Task.start_link(fn -> 
  Process.sleep(1000)
  IO.puts("I did the thing!!!")
end)
```

```elixir
Task.Supervisor.start_link(name: MyTaskSupervisor)

Task.Supervisor.start_child(
  MyTaskSupervisor,
  fn ->
    IO.puts("Task started")
    Process.sleep(2000)
    IO.puts("Task stopping")
  end
)
```

```elixir
# Let's talk agents
{:ok, pid} = Agent.start_link(fn -> %{name: "Bob", age: 30} end)
# To get from the state
Agent.get(pid, fn state -> state.name end)
# To cast
Agent.update(pid, fn state -> %{state | age: state.age + 1} end)
# Check result after
Agent.get(pid, fn state -> state end)
# If you want an async update you can use Agent.cast
```

```elixir
# Let's talk about concurrent Agent processes
{:ok, counter} = Agent.start_link(fn -> 0 end)

spawn(fn -> Agent.update(counter, fn count -> count + 1 end) end)

```

```elixir
Agent.get(counter, fn count -> count end)
```

```elixir
defmodule MyAgent do
  @moduledoc """
  As you can see here, the agent process is very similar to this. You can pass 
  anything as a message. Even lambda, that is what an Agent does. So in the end 
  you just use a simple task like this.
  """
  use GenServer

  def start_link(init_fun) do
    GenServer.start_link(__MODULE__, init_fun)
  end

  def init(init_fun) do
    {:ok, init_fun.()}
  end

  def get(pid, fun) do
    GenServer.call(pid, {:get, fun})
  end

  def update(pid, fun) do
    GenServer.call(pid, {:update, fun})
  end

  def handle_call({:get, fun}, _from, state) do
    response = fun.(state)
    {:reply, response, state}
  end

  def handle_call({:update, fun}, _from, state) do
    new_state = fun.(state)
    {:reply, :ok, new_state}
  end
end
```

```elixir
defmodule KeyValue do
  use GenServer

  def start_link do
    GenServer.start_link(__MODULE__, nil, name: __MODULE__)
  end

  def put(key, value) do
    GenServer.cast(__MODULE__, {:put, key, value})
  end

  def get(key) do
    GenServer.call(__MODULE__, {:get, key})
  end

  def init(_) do
    {:ok, %{}}
  end

  def handle_cast({:put, key, value}, store) do
    {:noreply, Map.put(store, key, value)}
  end

  def handle_call({:get, key}, _, store) do
    {:reply, Map.get(store, key), store}
  end
end
```

```elixir
# This is just a simple implemetation of the KeyValue as you can see it can 
# be done in GenServer
KeyValue.start_link()
KeyValue.put(:some_key, :some_value)
KeyValue.get(:some_key)
```

```elixir
# Now let's work with :ets
# we have new/2
# insert/2
# lookup/2
table = :ets.new(:my_table, [])
:ets.insert(table, {:key_1, 1})
:ets.insert(table, {:key_2, 2})
:ets.insert(table, {:key_1, 3}) # Remeber that the last line will trumpe
```

```elixir
:ets.lookup(table, :key_1)
|> IO.inspect()
:ets.lookup(table, :key_2)
|> IO.inspect()
```

```elixir
# Let's name a table and then see what happens
:ets.new(:my_table, [:named_table])
```

```elixir
# Lets work with the table here
:ets.insert(:my_table, {:key_1, 3})
:ets.lookup(:my_table, :key_2)
```

```elixir
defmodule EtsKeyValue do
  @moduledoc """
  We are going to implement a GenServer to watch the KeyValue store and then
  Use :ets to do the work to the table
  """
  use GenServer

  def start_link do
    GenServer.start_link(__MODULE__, nil, name: __MODULE__)
  end

  def init(_) do
    :ets.new(
      __MODULE__,
      [:named_table, :public, write_concurrency: true]
    )

    {:ok, nil}
  end

  def put(key, value) do
    :ets.insert(__MODULE__, {key, value})
  end

  def get(key) do
    case :ets.lookup(__MODULE__, key) do
      [{^key, value}] -> value
      [] -> nil
    end
  end
end
```

```elixir
#Pattern matching

todo_list = :ets.new(:todo_list, [:bag])

# todo_list = :ets.new(:todo_list, [:bag])

:ets.insert(todo_list, {~D[2023-05-24], "Dentist"})

:ets.insert(todo_list, {~D[2023-05-24], "Shopping"})

:ets.insert(todo_list, {~D[2023-05-30], "Dentist"})
```

```elixir
# This is a plain lookup
:ets.lookup(todo_list, ~D[2023-05-24])
```

```elixir
# Here is a match
:ets.match_object(todo_list, {:_, "Dentist"})
```

```elixir
defmodule SimpleRegistry do
  @moduledoc """
  We want to use GenServer to implement a unique table that can do the 
  following
  iex> {:ok, _} = SimpleRegistry.start_link()
  iex> SimpleRegistry.register(:some_name)
  :ok
  iex> SimpleRegistry.register(:some_name)
  :error
  iex> pid = SimpleRegistry.whereis(:some_name)
  iex> not_pid = SimpleRegistry.whereis(:unregistered_name)
  iex> is_pid(pid) and not is_pid(not_pid)
  true
  """
  use GenServer

  def start_link do
    GenServer.start_link(__MODULE__, nil, name: __MODULE__)
  end

  def register(key) do
    GenServer.call(__MODULE__, {:register, key, self()})
  end

  def whereis(key) do
    GenServer.call(__MODULE__, {:whereis, key})
  end

  @impl GenServer
  def init(_) do
    Process.flag(:trap_exit, true)
    {:ok, %{}}
  end

  @impl GenServer
  def handle_call({:register, key, pid}, _, process_registry) do
    case Map.get(process_registry, key) do
      nil ->
        Process.link(pid)
        {:reply, :ok, Map.put(process_registry, key, pid)}

      _ ->
        {:reply, :error, process_registry}
    end
  end

  @impl GenServer
  def handle_call({:whereis, key}, _, process_registry) do
    {:reply, Map.get(process_registry, key), process_registry}
  end

  @impl GenServer
  def handle_info({:EXIT, pid, _reason}, process_registry) do
    {:noreply, deregister_pid(process_registry, pid)}
  end

  defp deregister_pid(process_registry, pid) do
    # We'll walk through each {key, value} item, and keep those elements whose
    # value is different to the provided pid.
    process_registry
    |> Enum.reject(fn {_key, registered_process} -> registered_process == pid end)
    |> Enum.into(%{})
  end
end
```

```elixir
defmodule SimpleRegistry.ETS do
  @moduledoc """
  We want to use ETS and GenServer to implement a unique table that can do the 
  following
  iex> {:ok, _} = SimpleRegistry.start_link()
  iex> SimpleRegistry.register(:some_name)
  :ok
  iex> SimpleRegistry.register(:some_name)
  :error
  iex> pid = SimpleRegistry.whereis(:some_name)
  iex> not_pid = SimpleRegistry.whereis(:unregistered_name)
  iex> is_pid(pid) and not is_pid(not_pid)
  true
  """
  use GenServer

  def start_link do
    GenServer.start_link(__MODULE__, nil, name: __MODULE__)
  end

  def register(key) do
    # We're linking to the registry server first, to avoid possible race condition.Note that it's therefore possible
    # that a caller process is linked, even though the registration fails. We can't simply unlink on a failing
    # registration, since a process might be registered under some other term. To properly solve this, we'd need another
    # ETS table to keep track of whether a process is already registered under some other term. To keep things simple,
    # this is not done here. For a proper implementation, you can study the Registry code at
    # https://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/registry.ex
    Process.link(Process.whereis(__MODULE__))

    if :ets.insert_new(__MODULE__, {key, self()}) do
      :ok
    else
      :error
    end
  end

  def whereis(key) do
    case :ets.lookup(__MODULE__, key) do
      [{^key, pid}] -> pid
      [] -> nil
    end
  end

  @doc"""
  This doesnt need a state as the ETS table is public access any need to acess
  the table can just be done with the ETS table name.
  """
  @impl GenServer
  def init(_) do 
    Process.flag(:trap_exit, true)
    :ets.new(__MODULE__, [:named_table, :public, read_concurrency: true, write_concurrency: true])
    {:ok, nil}
  end

  @impl GenServer
  def handle_info({:EXIT, pid, _reason}, state) do
    :ets.match_delete(__MODULE__, {:_, pid})
    {:noreply, state}
  end
end
```
