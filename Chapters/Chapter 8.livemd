# Chapter 8

## Section

```elixir
try_helper = fn fun ->
  try do
    fun.()
    IO.puts("No error.")
  catch
    :throw, value -> IO.puts("#{value} #{:throw}")
    type, value ->
      IO.puts("""
      Error
      #{inspect(type)}
      #{inspect(value)}
      """)
  end
end
```

```elixir
try_helper.(fn -> raise("Something went wrong") end)
try_helper.(fn -> throw("Thrown value") end)
try_helper.(fn -> exit("I'm done") end)
# as you can see each one of these raises an error.
```

```elixir
# Here is a quick example of error processing in concurrent processes
spawn(fn -> # Starts process 1
  spawn(fn -> # Starts process 2
    Process.sleep(1000)
    IO.puts("Process 2 finished")
  end)

  raise("Something went wrong") # Error is raised
end)
```

```elixir
# Let's talk about linking a process
spawn(fn ->
  spawn_link(fn ->
    Process.sleep(1000)
    IO.puts("Process 2 finished")
  end)

  raise("Something went wrong")
end)
```

```elixir
# Let's try to trap the exit
spawn(fn ->
  Process.flag(:trap_exit, true)
  spawn_link(fn -> raise("Something went wrong") end)

  receive do
    msg -> IO.inspect(msg)
  end
end)
```

```elixir
# Let's talk about Process.monitor/1

target_pid =
  spawn(fn ->
    Process.sleep(1000)
  end)

Process.monitor(target_pid)

receive do
  msg -> IO.inspect(msg)
end
```
