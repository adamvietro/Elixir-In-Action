# Recursion

## Section

```elixir
defmodule Recursion do
  def list_length([]), do: 0
  def list_length([_head | tail])  do
    1 + list_length(tail)
  end

  def tail_call_length(list), do: tail_length(0, list)
  
  defp tail_length(current, []), do: current
  defp tail_length(current, [_head | tail]) do
    tail_length(current + 1, tail)
  end
  

  def range({b,b}), do: IO.puts(b)
  def range({a, b}) when a < b do
    IO.puts(a)
    range({a + 1, b}) 
  end
  def range({a,b}) when a > b, do: {:error, "bad range"}


  def recursive_positive(list), do: positive(list, [])
  
  defp positive([], positive_list), do: positive_list
  defp positive([head | tail], positive_list) do
    if head > 0, do: positive(tail, [head | positive_list]),
      else: positive(tail, positive_list)
  end
end
```

```elixir
list = [1,2,3,4]
list_length = Recursion.list_length(list)
tail_length = Recursion.tail_call_length(list)

IO.inspect({list_length, tail_length})

range = {1,5}
Recursion.range(range)
bad_range = {5,1}
Recursion.range(bad_range)

positive = [1,-2,3,-4,5,6,7,-8,9,-10]
Recursion.recursive_positive(positive)
```
